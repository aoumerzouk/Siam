import React from 'react';
import type { Member } from '../../types/member';

interface MemberFormProps {
  onSubmit: (member: Omit<Member, 'id' | 'dateJoined'>) => void;
}

export default function MemberForm({ onSubmit }: MemberFormProps) {
  const [formData, setFormData] = React.useState({
    firstName: '',
    lastName: '',
    email: [''],
    phone: {
      primary: '',
      secondary: ''
    },
    address: {
      street: '',
      city: '',
      state: '',
      zipCode: ''
    }
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit({
      ...formData,
      memberNumber: 'AUTO', // Will be generated by backend
      status: 'active'
    });
  };

  const addEmail = () => {
    setFormData(prev => ({
      ...prev,
      email: [...prev.email, '']
    }));
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-200">First Name</label>
          <input
            type="text"
            required
            className="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.firstName}
            onChange={e => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-200">Last Name</label>
          <input
            type="text"
            required
            className="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.lastName}
            onChange={e => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-200">Email Addresses</label>
        {formData.email.map((email, index) => (
          <input
            key={index}
            type="email"
            required
            className="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={email}
            onChange={e => setFormData(prev => ({
              ...prev,
              email: prev.email.map((em, i) => i === index ? e.target.value : em)
            }))}
          />
        ))}
        <button
          type="button"
          onClick={addEmail}
          className="mt-2 text-sm text-blue-400 hover:text-blue-300"
        >
          Add another email
        </button>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-200">Primary Phone</label>
          <input
            type="tel"
            className="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.phone.primary}
            onChange={e => setFormData(prev => ({
              ...prev,
              phone: { ...prev.phone, primary: e.target.value }
            }))}
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-200">Secondary Phone</label>
          <input
            type="tel"
            className="mt-1 block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.phone.secondary}
            onChange={e => setFormData(prev => ({
              ...prev,
              phone: { ...prev.phone, secondary: e.target.value }
            }))}
          />
        </div>
      </div>

      <div className="space-y-4">
        <label className="block text-sm font-medium text-gray-200">Address</label>
        <input
          type="text"
          placeholder="Street Address"
          required
          className="block w-full rounded-md bg-gray-700 border-gray-600 text-white"
          value={formData.address.street}
          onChange={e => setFormData(prev => ({
            ...prev,
            address: { ...prev.address, street: e.target.value }
          }))}
        />
        <div className="grid grid-cols-3 gap-4">
          <input
            type="text"
            placeholder="City"
            required
            className="block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.address.city}
            onChange={e => setFormData(prev => ({
              ...prev,
              address: { ...prev.address, city: e.target.value }
            }))}
          />
          <input
            type="text"
            placeholder="State"
            required
            className="block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.address.state}
            onChange={e => setFormData(prev => ({
              ...prev,
              address: { ...prev.address, state: e.target.value }
            }))}
          />
          <input
            type="text"
            placeholder="ZIP Code"
            required
            className="block w-full rounded-md bg-gray-700 border-gray-600 text-white"
            value={formData.address.zipCode}
            onChange={e => setFormData(prev => ({
              ...prev,
              address: { ...prev.address, zipCode: e.target.value }
            }))}
          />
        </div>
      </div>

      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
      >
        Create Member
      </button>
    </form>
  );
}